#ifndef I2C_H // Include guard to prevent multiple inclusions
#define I2C_H

/*
 * i2c.h - Header file for I2C driver implementation on Nexys A7
 *
 * Purpose: Defines constants, global variables, and function prototypes for
 *          initializing and managing the AXI IIC controller in polling mode.
 *          Supports communication with the TSL2561 light sensor and other I2C
 *          devices within a FreeRTOS environment on a Microblaze system.
 *          Designed for simplicity and minimal resource usage in an embedded
 *          system context.
 *
 * Course:  ECE 544 - Embedded Systems Design, Winter 2025
 *
 * Dependencies: Relies on Xilinx BSP headers for hardware interaction and
 *               FreeRTOS headers for task management.
 */

/*--------------------------------------------------------------------------*/
/* BSP Includes - Necessary Xilinx BSP headers for hardware interaction     */
/*--------------------------------------------------------------------------*/
#include "sleep.h"      // Provides usleep() for microsecond timing delays during I2C operations
#include "xiic.h"       // Xilinx I2C driver API for controlling the AXI IIC hardware peripheral
#include "xil_printf.h" // Xilinx lightweight printf implementation for debug and status output
#include "xintc.h" // Xilinx interrupt controller API, included for compatibility with system interrupts
#include "xparameters.h" // Hardware-specific parameters (e.g., device IDs) generated by the BSP

/*--------------------------------------------------------------------------*/
/* FreeRTOS Includes - Core FreeRTOS headers for task and interrupt management */
/*--------------------------------------------------------------------------*/
#include "FreeRTOS.h" // Main FreeRTOS kernel definitions (e.g., task scheduling, timing macros)
#include "task.h"     // Task management APIs (e.g., vTaskDelay for task delays)

/*--------------------------------------------------------------------------*/
/* Device Instance Definitions - Hardware-specific IDs and addresses        */
/*--------------------------------------------------------------------------*/
/**
 * @def IIC_DEVICE_ID
 * @brief Device ID for the AXI IIC controller, sourced from xparameters.h.
 *        Identifies the specific I2C peripheral in the hardware design.
 */
#define IIC_DEVICE_ID XPAR_IIC_0_DEVICE_ID

/**
 * @def INTC_DEVICE_ID
 * @brief Device ID for the AXI interrupt controller, sourced from xparameters.h.
 *        Identifies the interrupt controller for system-wide interrupt handling.
 * @note Unused in this polling-based implementation but included for compatibility.
 */
#define INTC_DEVICE_ID XPAR_INTC_0_DEVICE_ID

/**
 * @def I2C_SLAVE_ADDR
 * @brief Default I2C slave address for the TSL2561 sensor (0x39).
 *        Corresponds to the TSL2561 with its ADDR pin floating; other options
 *        are 0x29 (ADDR low) or 0x49 (ADDR high).
 */
#define I2C_SLAVE_ADDR 0x39

/*--------------------------------------------------------------------------*/
/* Global Variables - Extern declarations for objects defined in i2c.c      */
/*--------------------------------------------------------------------------*/
/**
 * @brief IIC driver instance for interacting with the AXI IIC hardware.
 *        Defined in i2c.c and used across all I2C functions.
 */
extern XIic IicInstance;

/**
 * @brief Pointer to I2C configuration data, populated by XIic_LookupConfig.
 *        Stores hardware-specific settings (e.g., base address) for initialization.
 */
extern XIic_Config* ConfigPtr;

/**
 * @brief Shared interrupt controller instance, defined in main.c.
 *        Included for system-wide interrupt handling compatibility, though unused
 *        in this polling-based driver.
 */
extern XIntc Intc;

/*--------------------------------------------------------------------------*/
/* Function Prototypes - Declarations for I2C driver functions implemented in i2c.c */
/*--------------------------------------------------------------------------*/
/**
 * @brief Initializes the AXI IIC controller in polling mode.
 * @return XST_SUCCESS if initialization succeeds, XST_FAILURE otherwise
 *
 * Description: Configures the AXI IIC peripheral as an I2C master, performs a
 *              minimal reset, and sets the default slave address to 0x39 (TSL2561).
 *              Uses polling instead of interrupts for simplicity and reduced overhead.
 */
int i2c_init ( void );

/**
 * @brief Scans the I2C bus for devices from address 0x00 to 0x77.
 * @param InstancePtr Pointer to the initialized XIic instance
 *
 * Description: Probes each valid I2C address using a 0-byte write to detect device
 *              ACKs, skipping reserved ranges (0x00-0x07, 0x78-0x7F). Reports detected
 *              devices via xil_printf with minimal memory usage.
 */
void i2c_scan ( XIic* InstancePtr );

/**
 * @brief Reads and displays the I2C Control Register (CR) contents.
 * @param InstancePtr Pointer to the initialized XIic instance
 *
 * Description: Reads the AXI IIC Control Register (offset 0x100) and provides a
 *              bit-by-bit breakdown of its contents for debugging the controller's
 *              configuration state (e.g., master mode, enable status).
 */
void i2c_read_control ( XIic* InstancePtr );

/**
 * @brief Reads and displays the I2C Status Register (SR) contents.
 * @param InstancePtr Pointer to the initialized XIic instance
 *
 * Description: Reads the AXI IIC Status Register (offset 0x104) and provides a
 *              bit-by-bit breakdown with diagnostic notes for debugging the bus
 *              state (e.g., bus busy, arbitration lost).
 */
void i2c_read_status ( XIic* InstancePtr );

/**
 * @brief Performs a soft reset of the I2C peripheral.
 * @param InstancePtr Pointer to the initialized XIic instance
 * @return XST_SUCCESS if reset succeeds, XST_FAILURE if bus remains busy
 *
 * Description: Resets the AXI IIC controller by writing to its reset register,
 *              clears FIFOs, and re-enables operation as a master. Includes a bus
 *              busy check to verify reset success.
 */
int i2c_soft_reset ( XIic* InstancePtr );

#endif /* I2C_H */